name: iOS Release CI

on:
  push:
    branches: [ "feature/*" ]

jobs:
  build:
    name: Build iOS App Bundle
    runs-on: macos-latest

    steps:
      # Step : Checkout Code
      - name: Checkout repository
        uses: actions/checkout@v3

      # Step : Set Up JDK for Gradle
      - name: Set up JDK
        uses: actions/setup-java@v3
        with:
          java-version: '17'
          distribution: 'zulu'

      # Step : Set up Xcode
      - name: Set up Xcode
        uses: maxim-lobanov/setup-xcode@v1
        with:
          xcode-version: "16.2"  # Update this to match your Xcode version

      # Decode Keystore and secrets.properties
      - name: Decode secrets and keystore
        run: |
          echo "$KEYSTORE_BASE64" | base64 --decode > $GITHUB_WORKSPACE/oasis-release-upload-keystore.jks
          echo "$SECRETS_FILE" > $GITHUB_WORKSPACE/secrets.properties
          echo "$SECRETS_XCCONFIG" > $GITHUB_WORKSPACE/iosApp/Configuration/Secrets.xcconfig
        env:
          KEYSTORE_BASE64: ${{ secrets.KEYSTORE_BASE64 }}
          SECRETS_FILE: ${{ secrets.SECRETS_FILE }}
          SECRETS_XCCONFIG: ${{ secrets.SECRETS_XCCONFIG }}

      - name: Build KMM Framework
        run: |
#          ./gradlew :composeApp:linkReleaseFrameworkIosArm64
#          ./gradlew :composeApp:linkReleaseFrameworkIosSimulatorArm64

      - name: Set up App Store Connect API Key
        run: |
          mkdir -p ~/.appstoreconnect/private_keys
          echo "${{ secrets.APPLE_API_KEY_BASE64 }}" | base64 --decode > ~/.appstoreconnect/private_keys/AuthKey_${{ secrets.APP_STORE_KEY_ID }}.p8

      - name: Authenticate with Apple API Key
        run: |
          echo $APPLE_KEY_ID
          echo $APPLE_ISSUER_ID
          xcrun altool --list-providers \
            --apiKey ${{ secrets.APPLE_KEY_ID }} \
            --apiIssuer ${{ secrets.APPLE_ISSUER_ID }}

      # Step : Build the App
      - name: Build the iOS app
        run: |
          xcodebuild clean build \
            -project $GITHUB_WORKSPACE/iosApp/iosApp.xcodeproj \
            -scheme iosApp \
            -sdk iphoneos \
            -configuration Release \
            -archivePath $GITHUB_WORKSPACE/build/Oasis.xcarchive \
            -allowProvisioningUpdates

      # Step 5: Export the IPA (App Bundle)
      # create provisioning profile https://developer.apple.com/account/resources/profiles/add
      - name: Export IPA
        run: |
          xcodebuild -exportArchive \
            -archivePath $GITHUB_WORKSPACE/build/Oasis.xcarchive \
            -exportOptionsPlist exportOptions.plist \
            -exportPath $GITHUB_WORKSPACE/build

      # Step : Upload the IPA as an artifact
      - name: Upload IPA Artifact
        uses: actions/upload-artifact@v4
        with:
          name: iOS-App
          path: build/*.ipa
