name: iOS Release CI

on:
  push:
    branches: [ "feature/*" ]

jobs:
  build:
    name: Build iOS App Bundle
    runs-on: macos-latest

    steps:
      # Step : Checkout Code
      - name: Checkout repository
        uses: actions/checkout@v3

      # Step : Set Up JDK for Gradle
      - name: Set up JDK
        uses: actions/setup-java@v3
        with:
          java-version: '17'
          distribution: 'zulu'

      # Step : Set up Xcode
      - name: Set up Xcode
        uses: maxim-lobanov/setup-xcode@v1
        with:
          xcode-version: "16.2"  # Update this to match your Xcode version

      # Decode Keystore and secrets.properties
      - name: Decode secrets and keystore
        run: |
          echo "$SECRETS_FILE" > $GITHUB_WORKSPACE/secrets.properties
          echo "$SECRETS_XCCONFIG" > $GITHUB_WORKSPACE/iosApp/Configuration/Secrets.xcconfig
          cat $GITHUB_WORKSPACE/iosApp/Configuration/Secrets.xcconfig
        env:
          KEYSTORE_BASE64: ${{ secrets.KEYSTORE_BASE64 }}
          SECRETS_FILE: ${{ secrets.SECRETS_FILE }}
          SECRETS_XCCONFIG: ${{ secrets.SECRETS_XCCONFIG }}

      - name: Install the Apple certificate and provisioning profile
        env:
          BUILD_CERTIFICATE_BASE64: ${{ secrets.APPLE_BUILD_CERTIFICATE_BASE64 }}
          P12_PASSWORD: ${{ secrets.APPLE_P12_PASSWORD }}
          BUILD_PROVISION_PROFILE_BASE64: ${{ secrets.APPLE_BUILD_PROVISION_PROFILE_BASE64 }}
          KEYCHAIN_PASSWORD: ${{ secrets.APPLE_KEYCHAIN_PASSWORD }}
        run: |
          # create variables
          CERTIFICATE_PATH=$RUNNER_TEMP/build_certificate.p12
          PP_PATH=$RUNNER_TEMP/build_pp.mobileprovision
          KEYCHAIN_PATH=$RUNNER_TEMP/app-signing.keychain-db

          # import certificate and provisioning profile from secrets
          echo -n "$BUILD_CERTIFICATE_BASE64" | base64 --decode -o $CERTIFICATE_PATH
          echo -n "$BUILD_PROVISION_PROFILE_BASE64" | base64 --decode -o $PP_PATH

          # create temporary keychain
          security create-keychain -p "$KEYCHAIN_PASSWORD" $KEYCHAIN_PATH
          security set-keychain-settings -lut 21600 $KEYCHAIN_PATH
          security unlock-keychain -p "$KEYCHAIN_PASSWORD" $KEYCHAIN_PATH

          # import certificate to keychain
          security import $CERTIFICATE_PATH -P "$P12_PASSWORD" -A -t cert -f pkcs12 -k $KEYCHAIN_PATH
          security set-key-partition-list -S apple-tool:,apple: -k "$KEYCHAIN_PASSWORD" $KEYCHAIN_PATH
          security list-keychain -d user -s $KEYCHAIN_PATH

          # apply provisioning profile
          mkdir -p ~/Library/MobileDevice/Provisioning\ Profiles
          cp $PP_PATH ~/Library/MobileDevice/Provisioning\ Profiles
          
          xcrun simctl list runtimes
      # Step : Build the App
      - name: Build the iOS app
        run: |
          xcodebuild clean build \
            -project $GITHUB_WORKSPACE/iosApp/iosApp.xcodeproj \
            -scheme iosApp \
            -sdk iphoneos18.1 \
            -configuration Release \
            -archivePath $GITHUB_WORKSPACE/build/OasisShoreditch.xcarchive \
            -destination 'generic/platform=iOS' \
            -verbose
        env:
          API_KEY_PATH: "~/.appstoreconnect/private_keys/AuthKey_${{ secrets.APPLE_KEY_ID }}.p8"
      # Step 5: Export the IPA (App Bundle)
      # create provisioning profile https://developer.apple.com/account/resources/profiles/add
      - name: Export IPA
        run: |
          xcodebuild -exportArchive \
            -archivePath $GITHUB_WORKSPACE/build/OasisShoreditch.xcarchive \
            -exportOptionsPlist exportOptions.plist \
            -exportPath $GITHUB_WORKSPACE/build

      # Step : Upload the IPA as an artifact
      - name: Upload IPA Artifact
        uses: actions/upload-artifact@v4
        with:
          name: iOS-App
          path: build/*.ipa
